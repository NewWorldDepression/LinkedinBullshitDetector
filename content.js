// Fonction pour calculer le score de bullshit
function calculateBullshitScore(text) {
    let score = 0;
    const bullshitKeywords = [
        "synergie", "catalyseur", "optimiser", "√©cosyst√®me", "innovation disruptive",
        "valeur ajout√©e", "transformation digitale", "mon√©tiser", "roadmap",
        "paradigm shift", "best practices", "quick win", "low hanging fruit",
        "alignement", "scalabilit√©", "solution orient√©e client", "proactif",
        "holistique", "challenge", "opportunit√©", "croissance exponentielle",
        "leadership √©clair√©", "pens√©e lat√©rale", "core business", "business review",
        "agile", "framework", "m√©thodologie", "co-cr√©ation", "empowerment",
        "engager", "insight", "pivot", "visionnaire", "win-win",
        "transformation mindset", "co-construction", "solutionner", "cr√©er du lien",
        "gamification", "growth hacking", "storytelling", "mindfulness",
        "wellness", "intrapreneurship", "reskilling", "upskilling", "d√©sinterm√©diation"
    ];

    const buzzwordRegex = new RegExp(bullshitKeywords.join("|"), "gi");
    const matches = text.match(buzzwordRegex);
    if (matches) {
        score += matches.length * 10; // Chaque mot cl√© ajoute 10 points
    }

    // R√®gles bas√©es sur la longueur du post (les posts tr√®s longs ou tr√®s courts peuvent √™tre suspects)
    if (text.length < 50 || text.length > 1000) {
        score += 5;
    }

    // V√©rifier l'utilisation excessive d'emojis (indicateur de "feel-good" bullshit)
    const emojiRegex = /[\u{1F600}-\u{1F64F}\u{1F300}-\u{1F5FF}\u{1F680}-\u{1F6FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}]/gu;
    const emojiMatches = text.match(emojiRegex);
    if (emojiMatches && emojiMatches.length > 5) { // Plus de 5 emojis
        score += emojiMatches.length * 2;
    }

    // R√©p√©tition de mots ou phrases simples (peut indiquer un contenu creux)
    const words = text.toLowerCase().split(/\s+/).filter(word => word.length > 2);
    const wordCounts = {};
    words.forEach(word => {
        wordCounts[word] = (wordCounts[word] || 0) + 1;
    });
    for (const word in wordCounts) {
        if (wordCounts[word] > 3) { // Si un mot est r√©p√©t√© plus de 3 fois
            score += (wordCounts[word] - 3) * 5;
        }
    }

    // D√©tection de phrases g√©n√©riques ou "creuses"
    const genericPhrases = [
        "h√¢te de voir vos commentaires", "qu'en pensez-vous", "n'h√©sitez pas √† partager",
        "je suis ravi de partager", "une pens√©e pour", "un grand merci √†",
        "continuons la conversation", "ensemble nous pouvons", "d√©couvrez comment"
    ];
    const genericRegex = new RegExp(genericPhrases.join("|"), "gi");
    const genericMatches = text.match(genericRegex);
    if (genericMatches) {
        score += genericMatches.length * 7; // Chaque phrase g√©n√©rique ajoute 7 points
    }

    return Math.min(100, score); // Le score ne d√©passe pas 100
}

// Fonction pour d√©terminer la couleur et le message du score
function getScoreInfo(score) {
    let color;
    let message;

    if (score < 30) {
        color = '#4CAF50'; // Vert (peu de bullshit)
        message = 'Bullshit Score: Low';
    } else if (score < 60) {
        color = '#FFC107'; // Orange (moyen)
        message = 'Bullshit Score: Medium'
    } else {
        color = '#F44336'; // Rouge (beaucoup de bullshit)
        message = 'Bullshit Score: HIGH! üö©'; // Ajout d'un drapeau pour souligner
    }
    return { color, message };
}

// Fonction pour traiter un post et ajouter le score
function processPost(postElement) {
    // Utiliser un attribut pour marquer les posts trait√©s et √©viter les doublons
    if (postElement.dataset.bullshitProcessed) {
        return;
    }

    let postText = '';
    // Cibler le contenu principal du post (peut varier selon les mises √† jour de LinkedIn)
    // On cherche un √©l√©ment de texte large dans le post
    const textElement = postElement.querySelector('div.feed-shared-update-v2__description-wrapper, span.break-words, div.feed-shared-text');

    if (textElement) {
        postText = textElement.innerText;
    } else {
        // Fallback pour les commentaires ou d'autres formats de contenu
        const commentTextElement = postElement.querySelector('div.comments-view__comment-item-content, div.comment-item__content');
        if (commentTextElement) {
            postText = commentTextElement.innerText;
        }
    }

    if (postText.trim() === '') {
        // Si le post n'a pas de texte significatif (ex: juste une image/vid√©o sans description), on ne l'√©value pas.
        return;
    }

    const score = calculateBullshitScore(postText);
    const { color, message } = getScoreInfo(score);

    const scoreDisplay = document.createElement('div');
    scoreDisplay.classList.add('bullshit-score-display');
    scoreDisplay.style.cssText = `
        background-color: ${color};
        color: white;
        padding: 4px 8px;
        border-radius: 5px;
        font-size: 12px;
        font-weight: bold;
        display: inline-block;
        vertical-align: middle;
        margin-left: 10px; /* Ajout d'une marge pour l'espacement */
        flex-shrink: 0; /* Emp√™che le score d'√™tre r√©duit si l'espace est limit√© */
    `;
    scoreDisplay.innerText = `${message} (${score}/100)`;

    // Trouver l'emplacement cible pour ins√©rer le score
    // On recherche le conteneur des actions sociales qui est souvent stable
    let insertPoint = postElement.querySelector('.feed-shared-social-actions, .comments-view__comment-action-bar');

    // Cibler sp√©cifiquement le bouton d'identit√© comme vous l'avez demand√©
    const identityButton = postElement.querySelector('.social-actions-button.content-admin-identity-toggle-button');

    if (identityButton) {
        // Ins√©rer juste apr√®s le bouton d'identit√©
        if (!identityButton.nextElementSibling?.classList.contains('bullshit-score-display')) {
            identityButton.parentNode.insertBefore(scoreDisplay, identityButton.nextSibling);
            postElement.dataset.bullshitProcessed = true;
        }
    } else if (insertPoint) {
        // Fallback: si le bouton d'identit√© n'est pas trouv√©, ins√©rer au d√©but de la barre d'actions sociales
        if (!insertPoint.querySelector('.bullshit-score-display')) {
            insertPoint.prepend(scoreDisplay);
            postElement.dataset.bullshitProcessed = true;
        }
    } else {
        // Dernier recours: si aucune des cibles n'est trouv√©e, chercher un endroit dans l'en-t√™te du post
        const headerElement = postElement.querySelector('.feed-shared-actor__meta, .comments-view__comment-meta');
        if (headerElement && !headerElement.querySelector('.bullshit-score-display')) {
            headerElement.appendChild(scoreDisplay);
            postElement.dataset.bullshitProcessed = true;
        }
    }
}

// Fonction pour observer les changements dans le DOM et d√©tecter de nouveaux posts
function observePosts() {
    const observer = new MutationObserver(mutations => {
        mutations.forEach(mutation => {
            if (mutation.addedNodes.length > 0) {
                mutation.addedNodes.forEach(node => {
                    // V√©rifier si le n≈ìud ajout√© est un post principal ou un commentaire
                    if (node.nodeType === 1) { // S'assurer que c'est un √©l√©ment HTML
                        // S√©lecteurs plus robustes pour les posts principaux
                        if (node.matches('div[data-urn*="urn:li:activity"], article.feed-shared-update-v2')) {
                            processPost(node);
                        }
                        // S√©lecteurs pour les commentaires ou r√©ponses
                        if (node.matches('div.comments-view__comment-item, li.comment-item')) {
                            processPost(node);
                        }
                        // Pour les cas o√π les √©l√©ments de post sont ajout√©s comme enfants dans une zone plus grande (ex: d√©filement)
                        const newPosts = node.querySelectorAll('div[data-urn*="urn:li:activity"], article.feed-shared-update-v2, div.comments-view__comment-item, li.comment-item');
                        newPosts.forEach(post => processPost(post));
                    }
                });
            }
        });
    });

    // Cible le flux d'actualit√©s principal de LinkedIn et d'autres zones o√π les posts/commentaires peuvent appara√Ætre
    // On observe un √©l√©ment parent large et stable pour capturer les ajouts
    const feedContainer = document.querySelector('.scaffold-layout__main, main[role="main"]');
    if (feedContainer) {
        observer.observe(feedContainer, { childList: true, subtree: true });
        console.log("MutationObserver initialis√© sur le conteneur du fil d'actualit√©.");
    } else {
        console.warn("Conteneur du fil d'actualit√© LinkedIn introuvable. Le d√©tecteur de bullshit pourrait ne pas fonctionner sur toutes les pages.");
        // Fallback: observer le corps du document si le conteneur sp√©cifique n'est pas trouv√©
        observer.observe(document.body, { childList: true, subtree: true });
    }
}

// Lancer le traitement des posts d√©j√† pr√©sents lors du chargement initial
document.querySelectorAll('div[data-urn*="urn:li:activity"], article.feed-shared-update-v2, div.comments-view__comment-item, li.comment-item').forEach(post => processPost(post));

// Lancer l'observation pour les posts qui se chargent dynamiquement
observePosts();